##########################################################################
# meat-a - README
##########################################################################

Table of contents

1. Description
2. Architecture - Brief Overview (only for developers)
3. Setup
4. The Web Interface


################################################################
# 1. Description
################################################################

meat-a is a WSGI based webservice for the organization of objects and related
meta information.

Objects have a guid and a source (e.g. a filename or an URL). meat-a lets
users share meta information like tags or comments. The data is stored in a
MongoDB database.


################################################################
# 2. Architecture - Brief Overview (for developers).
################################################################

Objects are stored in the object database (database.ObjectDb). They are
referenced by their guid and have a source. You can e.g. store a link
or a filename.

At the moment data is saved in a MongoDB database.

Users can tag and rate objects. They can also add objects to their
personal favorite list and recommend them to other users. It's possible to
write comments too.

Users can follow each other. If user A follows user B and user B also
follows user A they are friends. Friends can recommend objects to each
other. If a user profile is not protected every user can recommend objects
to the user.

Users are organized in a separate user store (database.UserDb).

Several activities generate notifications. If a user adds an object to his/her
favorite list friends will receive a notification for example. If the user profile
is not protected every user following the account will get a notification. Like
other items notifications are stored in separate data store (database.StreamDb).

Sometimes a user will receive an email. If you're going to create a new user
profile a request code will be sent by email for example. Emails are stored
in the database.MailDb data store.

A service (mailer.Mailer) sends emails in a user-defined interval. This process
can also be triggered via an UDP request.

The different data stores can be accessed through the app.Application class. The
app.AuthenticatedApplication wraps the methods of this class and tests additionally
if a request is authenticated.

The authentication mechanism is quite simple. A request must contain at least
the username of a valid account and the current UNIX timestamp (UTC). All
parameters need to be sorted alphabetically. Then the HMAC-SHA1 checksum has to be
calculated. The required secret is the SHA-256 checksum of the user password. You
can find an example in the util module (util.sign_message()).

There's also a full example client available in the client module: client.Client

The wsgi module tries to map a received path to a controller function. Each
controller returns a view.View object which will be used to generate the response.
The controller functions use an app.AuthenticatedApplication instance to access
the different data stores.

To test the available modules execute the test.py file.

To configure the service please have a look at the config module.

You need the following additional packages to run the web interface:
  * PIL (image library)
  * Cheetah
  * pymongo
  * Rocket (optional)


################################################################
# 3. Setup
################################################################

If you want to test the web application please install the Rocket module and
start the rocket server:

# python rocket_server.py

This will start a small HTTP test server on port 8000.

Of course you're welcome to use any HTTP server with WSGI support you like. Just
configure your preferred server and setup the index() method located in the
wsgi.py file as handler.

Without starting the mailer meat-a will not be able to send emails:

# python mailer.py

As mentioned before data is stored using MongoDB. Please ensure that the server
is running.

Configuration settings can be found in the config.py file. It's recommended to
change a few settings:

* WEBSITE_URL
  meat-a will generate various URLs (e.g. for changing passwords). Define the
  base URL of the web application here.

* MONGODB_HOST, MONGODB_PORT, MONGODB_DATABASE
  Please specify the connection details and database name of your MongoDB server.

* TMP_DIR
  Directory for temporary files. An absolute filename is highly recommended.

* AVATAR_DIR
  Directory for storing avatars. An absolute filename is highly recommended.

* SMTP_HOST, SMTP_PORT, SMTP_SSL, SMTP_ADDRESS, SMTP_USERNAME, SMTP_PASSWORD
  SMTP user credentials and details.

* MAILER_HOST, MAILER_PORT, MAILER_ALLOWED_CLIENTS
  Hostname and port of the mailer. You have also to specify the IP addresses of all
  allowed clients.


Emails and websites are generated using the Cheetah template framework and can
be found in the "tpl" directory.


################################################################
# 4. The Web Interface
################################################################

Most functions of the meat-a web interface require an authenticated request.
As mentioned before you have to sort the POST parameters alphabetically.
Then calculate the HMAC-SHA1 checksum of the parameters using the SHA-256
checksum of the user password as secret. The hex-string of the checksum has to be
sent as "signature" parameter.

The util.sign_message() method is a good example how the checksum can be
built:

def sign_message(secret, **kwargs):
	def serialize(value):
		t = type(value)

		if value is None:
			return "null"
		if t is int or t is long:
			return str(value)
		elif t is str:
			return value
		elif t is unicode:
			return value.encode("utf-8")
		elif t is bool:
			return str(value).lower()
		elif t is float:
			return str("%.2f" % value)
		else:
			raise Exception("Invalid parameter type: %s" % type(value))

	if type(secret) is unicode:
		secret = secret.encode("utf-8")

	h = hmac.new(secret, "", sha1)

	update = h.update

	for key in sorted(kwargs.keys(), key = lambda k: k.upper()):
		obj = kwargs[key]

		t = type(obj)

		if t is list or t is tuple:
			map(update, (serialize(v) for v in obj))
		else:
			update(serialize(obj))

	return h.hexdigest()


All strings have to be UTF-8 encoded when building the checksum. Please serialize
all values the following way:

null                    => "null"
int, long (e.g. 54, 12) => "54", "12"
bool                    => "false", "true"
float (e.g. 12.3)       => "12.30"


If you want to build the checksum of an array you have to iterate all its children
and process them one by one.

An authenticated request has to contain at least the following parameters:

* username : name of the authenticated user
* timestamp: current UNIX timestamp (UTC)
* signature: checksum of all parameters


Normally the response will have HTTP status 200 and a body like this:

{ "code": 0, "message": "ok" }

The "message" field holds a short description of the status. A list containing all
codes can be found in the exception.py file.

Please find below a list with different HTTP status codes and their reason:

400 => at least one required parameter is missing
404 => the specified path cannot be found
405 => the request method is invalid (e.g. GET instead of POST)
413 => the request is too large
500 => an internal error occured


meat-a provides the following functions:

#################################################
# I. User Accounts
#################################################

---------------------------------------
- 1. Request a new user account.
---------------------------------------

URL:        /account/new
METHOD    : POST
PARAMETERS: username, email
RESPONSE  : application/json

If the parameters are valid an email to the given address will be sent. This
email contains an URL which can be used to activate the account.

If not used the generated activation code will expire.

Example response: { "code": 200, "message": "Invalid parameter: 'username'" }


---------------------------------------
- 2. Activate a user account
---------------------------------------

URL:        /account/activate
METHOD    : GET
PARAMETERS: code
RESPONSE  : text/html

When the given activation code is valid an email containing a generated
password will be sent to the activated user account.

Example response: a website


---------------------------------------
- 3. Disable user account
---------------------------------------

URL:        /account/disable
METHOD    : POST
PARAMETERS: username, email, timestamp, signature
RESPONSE  : application/json

To disable a user account the user has to send his/her correct email
address.

Kindly note that user accounts will not be deleted from the data store.
Only the "blocked" flag will be set.

Disabled accounts will receive a notification by email.

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 4. Update password
---------------------------------------

URL:        /account/password/update
METHOD    : POST
PARAMETERS: username, old_password, new_password, timestamp, signature
RESPONSE  : application/json

The passwords have be sent as plaintext.

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 5. Request new password
---------------------------------------

URL:        /account/password/request
METHOD    : POST
PARAMETERS: username, email, timestamp, signature
RESPONSE  : application/json

If a user wants to replace his/her password with an auto-generated one
this method can be used. It will create a reset code and send it by
email.

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 6. Reset password
---------------------------------------

URL:        /account/password/reset
METHOD    : GET
PARAMETERS: code
RESPONSE  : text/html

When the given reset code is valid an email containing a new generated password
will be sent to the related user account.

Example response: a website


---------------------------------------
- 7. Test authentication
---------------------------------------

URL:        /account/authentication/test
METHOD    : POST
PARAMETERS: username, timestamp, signature
RESPONSE  : application/json

This function can be used to test if a user can be authenticated.

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 8. Update user details
---------------------------------------

URL:        /account/update
METHOD    : POST
PARAMETERS: username, email, firstname, lastname, gender, language, protected, timestamp, signature
RESPONSE  : application/json

The following fields will be updated: email, firstname, lastname, gender, language, protected

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 9. Update avatar
---------------------------------------

URL:        /account/avatar/update
METHOD    : POST (multipart)
PARAMETERS: username, filename, file, timestamp, signature
RESPONSE  : application/json

This function expect a multipart form which is a common format for HTTP file uploads.

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 10. Get user details
---------------------------------------

URL:        /account/details
METHOD    : POST
PARAMETERS: username, name, timestamp, signature
RESPONSE  : application/json

This function returns the user details of the account with the requested "name".
Kindly note that only friends can see the "email" and "following" fields when this account
is protected.

Example response: { "avatar": null, "email": "user_a@testmail.org", "firstname": "user_a", "following": [ "user_b" ],
                    "gender": "f", "language": "de", "lastname": null, "name": "user_a",
		    "protected": false, "timestamp": 1369143791561.0 }


---------------------------------------
- 11. Search users
---------------------------------------

URL:        /account/search
METHOD    : POST
PARAMETERS: username, query, timestamp, signature
RESPONSE  : application/json

This function searches the user store. Only friends can see the "email" and "following" fields
when the found account is protected.

Example response:  [ { "avatar": null, "firstname": null, "gender": null, "lastname": null,
                       "name": "user_c", "protected": true, "timestamp": 1369144005129.0 }
		     { "avatar": null, "firstname": null, "gender": null, "lastname": null,
		       "name": "user_b", "protected": true, "timestamp": 1369144005088.0 } ]


---------------------------------------
- 12. Follow users
---------------------------------------

URL:        /account/follow
METHOD    : POST
PARAMETERS: username, user, timestamp, signature
RESPONSE  : application/json

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 13. Get favorites
---------------------------------------

URL:        /account/favorites
METHOD    : POST
PARAMETERS: username, page, page_size, timestamp, signature
RESPONSE  : application/json

"comments_n" holds the number of related comments.

Example response: [ { "guid": "abcde", "source": "foo.png", "locked": False, "tags": [ "foo", "bar" ],
                      "score": { "up": 5, "down": 2, "fav": 8, "total": 11 }, "timestamp": 1369143414627.0,
		      "comments_n": 2 } ]


---------------------------------------
- 14. Get recommendations
---------------------------------------

URL:        /account/favorites
METHOD    : POST
PARAMETERS: username, page, page_size, timestamp, signature
RESPONSE  : application/json

Example response: [ { "guid": "abcde", "source": "foo.png", "locked": False, "tags": [ "foo", "bar" ],
                      "score": { "up": 5, "down": 2, "fav": 8, "total": 11 }, "timestamp": 1369143414627.0,
		      "comments_n": 2 } ]


---------------------------------------
- 15. Get messages
---------------------------------------

URL:        /account/messages
METHOD    : POST
PARAMETERS: username, older_than, page_size, timestamp, signature
RESPONSE  : application/json

At the moment there are 6 message types. The fields of each message depend on this type.

0 => the sender recommended an object to the receiver, additional fields: guid, comment
1 => the sender added a comment to an object, additional fields: guid, comment
2 => the sender favored an object, additional fields: guid
3 => the sender rated an object, additional fields: guid
4 => the sender follows the receiver
5 => the sender has stopped following the receiver

Example response: [ { "receiver": "user_a", "sender": { "avatar": null, "blocked": false, "firstname": null,
                      "gender": null, "lastname": null, "name": "user_b" }, "timestamp": 1369144270364.0, "type_id": 4 } ]


#################################################
# II. Objects
#################################################

---------------------------------------
- 16. Get a single object
---------------------------------------

URL:        /object/details
METHOD    : POST
PARAMETERS: username, guid, timestamp, signature
RESPONSE  : application/json

Example response: { "comments_n": 0, "guid": "vdMtoMdJZg1Wf0p7sLV3R1YAFAsFDYjw", "locked": false,
                    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png",
		    "tags": [ "foo", "bar" ], "timestamp": 1369145033933.0 }


---------------------------------------
- 17. Get multiple objects
---------------------------------------

URL:        /objects
METHOD    : POST
PARAMETERS: username, page, page_size, timestamp, signature
RESPONSE  : application/json

The objects are sorted by "timestamp" in descending order.

Example response: [ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
                      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [],
		      "timestamp": 1369145184233.0 },
		    { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
		      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [],
		      "timestamp": 1369145184213.0 } ]


---------------------------------------
- 18. Get objects (filtered by tag)
---------------------------------------

URL:        /objects/tag
METHOD    : POST
PARAMETERS: username, page, page_size, tag, timestamp, signature
RESPONSE  : application/json

The objects are sorted by "timestamp" in descending order.

Example response: [ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
                      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [ "1", "2" ],
		      "timestamp": 1369145184233.0 },
		    { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
		      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [ "1" ],
		      "timestamp": 1369145184213.0 } ]


---------------------------------------
- 19. Get popular objects
---------------------------------------

URL:        /objects/popular
METHOD    : POST
PARAMETERS: username, page, page_size, tag, timestamp, signature
RESPONSE  : application/json

The objects are sorted by the "score.total" field in descending order.

Example response: [ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
                      "score": { "down": 1, "fav": 2, "total": 200, "up": 201 }, "source": "foo.png", "tags": [],
		      "timestamp": 1369145184233.0 },
		    { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
		      "score": { "down": 0, "fav": 0, "total": 100, "up": 100 }, source: "bar.png", "tags": [],
		      "timestamp": 1369145184213.0 } ]


---------------------------------------
- 20. Get random objects
---------------------------------------

URL:        /objects/random
METHOD    : POST
PARAMETERS: username, page_size, tag, timestamp, signature
RESPONSE  : application/json

Example response: [ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
                      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [],
		      "timestamp": 1369145184233.0 },
		    { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
		      "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [],
		      "timestamp": 1369145184213.0 } ]


---------------------------------------
- 21. Tag an object
---------------------------------------

URL:        /object/tag
METHOD    : POST
PARAMETERS: username, guid, tags, timestamp, signature
RESPONSE  : application/json

The "tags" parameter has to be a JSON array containing tags to assign
(e.g. [ "foo", "bar" ]).

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 22. Rate an object
---------------------------------------

URL:        /object/rate
METHOD    : POST
PARAMETERS: username, guid, up, timestamp, signature
RESPONSE  : application/json

Use the "up" parameter to upvote/downvote an object (e.g. "true" to upvote
an object).

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 23. Add favorite
---------------------------------------

URL:        /object/favor
METHOD    : POST
PARAMETERS: username, guid, favor, timestamp, signature
RESPONSE  : application/json

Use the "favor" parameter to add or remove an object to the favorites list
(e.g. "false" to remove it).

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 24. Create a comment
---------------------------------------

URL:        /object/comments/add
METHOD    : POST
PARAMETERS: username, guid, text, timestamp, signature
RESPONSE  : application/json

Example response: { "code": 0, "message": "ok" }


---------------------------------------
- 25. Get comments
---------------------------------------

URL:        /object/comments
METHOD    : POST
PARAMETERS: username, page, page_size, timestamp, signature
RESPONSE  : application/json

Comments are sorted by "timestamp" in ascending order.

Example response: [ { "text": "foo", "timestamp": 1369145893148.0,
                      "user": { "avatar": null, "blocked": false, "firstname": null, "gender": null,
		      "lastname": null, "name": "user_b" } },
		    { "text": "bar", "timestamp": 1369145893161.0,
		      "user": { "avatar": null, "blocked": false, "firstname": null, "gender": null, 
		      lastname": null, "name": "user_a" } } ]


---------------------------------------
- 26. Recommend an object
---------------------------------------

URL:        /object/comments/add
METHOD    : POST
PARAMETERS: username, guid, receivers, timestamp, signature
RESPONSE  : application/json

The "receivers" parameter has to be a JSON array containing usernames
(e.g. [ "foo", "bar" ]).

Example response: { "code": 0, "message": "ok" }
