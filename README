##########################################################################
# meat-a - README
##########################################################################

Table of contents

1. Description
2. Architecture - Brief Overview (only for developers)
3. Setup
4. The Web Interface


################################################################
# 1. Description
################################################################

meat-a is a WSGI based webservice for the organization of objects and related
meta information.

Objects have a guid and a source (e.g. a filename or an URL). meat-a lets
users share meta information like tags or comments. The data is stored in a
MongoDB database.


################################################################
# 2. Architecture - Brief Overview (for developers).
################################################################

Objects are stored in the object database (database.ObjectDb). They are
referenced by their guid and have a source. You can e.g. store a link
or a filename.

At the moment data is saved in a MongoDB database.

Users can tag and rate objects. They can also add objects to their
personal favorite list and recommend them to other users. It's possible to
write comments too.

Users can follow each other. If user A follows user B and user B also
follows user A they are friends. Friends can recommend objects to each
other. If a user profile is not protected every user can recommend objects
to the user.

Users are organized in a separate user store (database.UserDb).

Several activities generate notifications. If a user adds an object to his/her
favorite list friends will receive a notification for example. If the user profile
is not protected every user following the account will get a notification. Like
other items notifications are stored in separate data store (database.StreamDb).

Sometimes a user will receive an email. If you're going to create a new user
profile a request code will be sent by email for example. Emails are stored
in the database.MailDb data store.

A service (mailer.Mailer) sends emails in a user-defined interval. This process
can also be triggered via an UDP request.

The different data stores can be accessed through the app.Application class. The
app.AuthenticatedApplication wraps the methods of this class and tests additionally
if a request is authenticated.

To authenticate a request three custom headers are required:

  * X-meat-a-account: the user account
  * X-meat-a-timestamp: current UNIX timestamp (UTC)
  * X-meat-a-signature: HMAXC-SHA1 checksum of the URL and the first two headers. The
    required secret is the SHA-256 checksum of the user password.

There's also a full example client available in the client module: client.Client

The wsgi module tries to map a received path to a controller function. Each
controller returns a view.View object which will be used to generate the response.
The controller functions use an app.AuthenticatedApplication instance to access
the different data stores.

To test the available modules execute the test.py file.

To configure the service please have a look at the config module.

You need the following additional packages to run the web interface:
  * PIL (image library)
  * Cheetah
  * pymongo
  * Rocket (optional)


################################################################
# 3. Setup
################################################################

If you want to test the web application please install the Rocket module and
start the rocket server:

# python rocket_server.py

This will start a small HTTP test server on port 8000.

Of course you're welcome to use any HTTP server with WSGI support you like. Just
configure your preferred server and setup the index() method located in the
wsgi.py file as handler.

Without starting the mailer meat-a will not be able to send emails:

# python mailer.py

As mentioned before data is stored using MongoDB. Please ensure that the server
is running.

Configuration settings can be found in the config.py file. It's recommended to
change a few settings:

* WEBSITE_URL
  meat-a will generate various URLs (e.g. for changing passwords). Define the
  base URL of the web application here.

* MONGODB_HOST, MONGODB_PORT, MONGODB_DATABASE
  Please specify the connection details and database name of your MongoDB server.

* TMP_DIR
  Directory for temporary files. An absolute filename is highly recommended.

* AVATAR_DIR
  Directory for storing avatars. An absolute filename is highly recommended.

* SMTP_HOST, SMTP_PORT, SMTP_SSL, SMTP_ADDRESS, SMTP_USERNAME, SMTP_PASSWORD
  SMTP user credentials and details.

* MAILER_HOST, MAILER_PORT, MAILER_ALLOWED_CLIENTS
  Hostname and port of the mailer. You have also to specify the IP addresses of all
  allowed clients.


Emails and websites are generated using the Cheetah template framework and can
be found in the "tpl" directory.


################################################################
# 4. The Web Interface
################################################################

As mentioned previously most functions of the meat-a web interface require an
authenticated request. The util.sign_request() method is a good example how the
checksum can be built. All strings have to be UTF-8 encoded when building
the checksum. 

The following error codes are used:
* 400 => at least one required parameter is missing
* 401 => the user is not authorized
* 403 => the action is not allowed
* 404 => the specified path cannot be found
* 405 => the request method is invalid (e.g. GET instead of POST)
* 413 => the request is too large
* 500 => an internal error occured


meat-a provides the following functions:

#################################################
# I. User Accounts
#################################################

---------------------------------------
- 1.1. Request a new user account
---------------------------------------
URL         : /account/request
METHOD      : POST
PARAMETERS  : username, mail
RESPONSE    : application/json
STATUS CODES: 202

Username and password have to be unique. If both parameters are valid an
unique request-id and related activation-code is generated. An activation
link is sent by mail and looks similar to the one found below:

# Example activation link:
http://example.org/account/request/Dkdga2jhL3tdgJ4dBn29asfXn0d0MjdkE
?code=ldA09gj31geCEo39

# Example response headers:
Location: http://example.org/account/request/Dkdga2jhL3tdgJ4dBn29asfXn0d0MjdkE
ETag: f6d3b7d3b9b0a2341169833f0d5423f7aa64fc28

# Example response body:
{ "url": "http://example.org/account/request/Dkdga2jhL3tdgJ4dBn29asfXn0d0MjdkE" }


---------------------------------------
- 1.2. Activation form
---------------------------------------
URL         : /account/request/$request-id
METHOD      : GET
PARAMETERS  : code (optional)
RESPONSE    : text/html
STATUS CODES: 200

# Response:
A HTML page providing a form to activate the requested user account. It has
four fields:

* mail: mail address of the user
* code: activation code related to the request id
* password1, password2: password to set

If the code parameter is specified in the URL the related input
field is filled.


---------------------------------------
- 1.3. Activate a user account
---------------------------------------
URL         : /account/request/$request-id
METHOD      : POST
PARAMETERS  : mail, code, password1, password2
RESPONSE    : application/json
STATUS CODES: 201

If the request id and the activation code exist and also the password and
mail address are valid the account is activated.

# Example response headers:
Location: http://example.org/user/john.doe
ETag: 8e454de32e514b6a8643ac9d644583c040753b4d

# Example response body:
{ "url": "http://example.org/user/john.doe" }


---------------------------------------
- 1.4. View user details
---------------------------------------
URL         : /user/$username
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

Only friends can see the "email" and "following" fields if the account is protected.

# Example headers:
ETag: 1369143791561

# Example response body:
{ "email": "john.doe@example.org", "firstname": "john", "lastname": "doe",
  "following": [ "sarah.connor" ], "gender": "male", "language": "de", "protected": false,
  "timestamp": 1369143791561 }


---------------------------------------
- 1.5. Update user details:
---------------------------------------
URL         : /user/$username
METHOD      : POST
PARAMETERS  : firstname, lastname, email, gender, language, protected
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# Example response body:
{ "email": "john.doe@example.org", "firstname": "john", "lastname": "doe",
  "following": [ "sarah.connor" ], "gender": "male", "language": "de", "protected": false,
  "timestamp": 1369143791561 }


---------------------------------------
- 1.6. Get avatar
---------------------------------------
URL       : /user/$username/avatar
METHOD    : GET
HEADERS   : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE  : image/*
STATUS CODES: 200

Only friends can download the avatar if the account is protected.

# Example response headers:
ETag: 29c26282f1e53b9598f8c5523579bd9ae3bf2a95

# Example response body:
{ "url": "http://example.org/user/john.doe" }


---------------------------------------
- 1.7. Update avatar
---------------------------------------
URL       : /user/$username/avatar
METHOD    : POST (multipart)
PARAMETERS: filename, file
HEADERS   : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE  : application/json
STATUS CODES: 201

This function expects a multipart form.

# Example response headers:
Location: http://example.org/user/$username/avatar
ETag: 434b0ee698a66ddff95622302c00e659798de778

# Example response body:
{ "url": "http://example.org/user/john.doe/avatar" }


---------------------------------------
- 1.8. Update password
---------------------------------------
URL         : /user/$username/password
METHOD      : POST
PARAMETERS  : old_password, new_password1, new_password2
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# Example response:
{ "password-hash": "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae" }


---------------------------------------
- 1.9. Request new password
---------------------------------------
URL         : /user/$username/password/request
METHOD      : POST
PARAMETERS  : username, email
RESPONSE    : application/json
STATUS CODES: 201

To change a password without knowing the current one a change request can
be created. A request id and code is sent by mail to the user. 

# Example link:
http://example.org/user/john.doe/password/request/c5aac592460a9ac7845e341090f6f9c8
?code=0d3429164142

# Example response headers:
Location: http://example.org/user/john.doe/password/request/c5aac592460a9ac7845e341090f6f9c8
ETag: 987072ac3931

# Example response body:
{ "url": "http://example.org/user/john.doe/password/request/c5aac592460a9ac7845e341090f6f9c8" }


---------------------------------------
- 1.10. Password change form
---------------------------------------
URL         : /user/$username/password/request/$request-id
METHOD      : GET
PARAMETERS  : code (optional)
RESPONSE    : text/html
STATUS CODES: 200

# Response:
A HTML page providing a form to change the password of a user account. It
has four fields:

* mail: mail address of the user
* code: request code related to the request id
* password1, password2: password to set

If the code parameter is specified in the URL the related input
field is filled.


---------------------------------------
- 11. Set new password
---------------------------------------
URL         : /user/$username/password/request/$request-id
METHOD      : POST
PARAMETERS  : request-id, password1, password2
RESPONSE    : text/html
STATUS CODES: 200

# Example response:
{ "password-hash": "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae" }


---------------------------------------
- 1.12. Search users
---------------------------------------
URL       : /user/search
METHOD    : GET
PARAMETERS: query
HEADERS   : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE  : application/json
STATUS CODES: 200

This function searches the user store. Only friends can see the "email" and "following" fields
when the found account is protected.

Example response:  [ { "avatar": null, "firstname": null, "gender": null, "lastname": null,
                       "name": "user_c", "protected": true, "timestamp": 1369144005129 }
		     { "avatar": null, "firstname": null, "gender": null, "lastname": null,
		       "name": "user_b", "protected": true, "timestamp": 1369144005088 } ]


---------------------------------------
- 1.13. Add/remove friend
---------------------------------------
URL         : /user/$username/friendship
METHOD      : PUT, DELETE
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
{ "friend?": "true" }


---------------------------------------
- 1.14. Get favorites
---------------------------------------
URL         : /user/$username/favorites
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

"comments_n" holds the number of related comments.

# example response body:
[ { "guid": "abcde", "source": "foo.png", "locked": False, "tags": [ "foo", "bar" ],
    "score": { "up": 5, "down": 2, "fav": 8, "total": 11 }, "timestamp": 1369143414627,
    "comments_n": 2 } ]


---------------------------------------
- 1.15. Add/remove favorite
---------------------------------------
URL         : /user/$username/favorite/$oid
METHOD      : POST, DELETE
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
{ "favorite?": "true" }


---------------------------------------
- 1.16. Get recommendations
---------------------------------------
URL         : /user/$username/recommended
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
PARAMETERS  : username, page, page_size, timestamp, signature
RESPONS  E  : application/json
STATUS CODES: 200

# example response body:
[ { "guid": "abcde", "source": "foo.png", "locked": False, "tags": [ "foo", "bar" ],
    "score": { "up": 5, "down": 2, "fav": 8, "total": 11 }, "timestamp": 1369143414627.0,
    "comments_n": 2 } ]


---------------------------------------
- 1.17. Get messages
---------------------------------------
URL         : /user/$username/messages
METHOD      : GET
PARAMETERS  : username, older_than, page_size, timestamp, signature
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

At the moment there are 6 message types. The fields of each message depend on this type.

0 => the sender recommended an object to the receiver, additional fields: guid, comment
1 => the sender added a comment to an object, additional fields: guid, comment
2 => the sender favored an object, additional fields: guid
3 => the sender rated an object, additional fields: guid
4 => the sender follows the receiver
5 => the sender has stopped following the receiver

# example response body:
[ { "receiver": "user_a", "sender": { "avatar": null, "blocked": false, "firstname": null,
    "gender": null, "lastname": null, "name": "user_b" }, "timestamp": 1369144270364.0, "type_id": 4 } ]


---------------------------------------
- 1.18. Mark message read
---------------------------------------
URL         : /user/$username/message/$id/read
METHOD      : POST
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
{ "read?": true }


#################################################
# II. Objects
#################################################

---------------------------------------
- 2.1. Get a single object
---------------------------------------
URL         : /object/$oid
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
{ "comments_n": 0, "guid": "vdMtoMdJZg1Wf0p7sLV3R1YAFAsFDYjw", "locked": false,
  "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png",
  "tags": [ "foo", "bar" ], "timestamp": 1369145033933.0 }


---------------------------------------
- 2.2. Get multiple objects
---------------------------------------
URL         : /objects/$page
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

The objects are sorted by "timestamp" in descending order.

# example request body:
[ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [],
    "timestamp": 1369145184233.0 },
  { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [],
    "timestamp": 1369145184213.0 } ]


---------------------------------------
- 2.3. Get objects (filtered by tag)
---------------------------------------
URL         : /objects/tag/$tag/$page
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

The objects are sorted by "timestamp" in descending order.

# example response body:
[ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [ "1", "2" ],
    "timestamp": 1369145184233.0 },
  { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
     "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [ "1" ],
     "timestamp": 1369145184213.0 } ]


---------------------------------------
- 2.4. Get popular objects
---------------------------------------
URL         : /objects/popular/$page
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

The objects are sorted by the "score.total" field in descending order.

# example response body:
[ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
    "score": { "down": 1, "fav": 2, "total": 200, "up": 201 }, "source": "foo.png", "tags": [],
    "timestamp": 1369145184233.0 },
  { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 100, "up": 100 }, source: "bar.png", "tags": [],
    "timestamp": 1369145184213.0 } ]


---------------------------------------
- 2.5. Get random objects
---------------------------------------
URL         : /objects/random
METHOD      : GET
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
[ { "comments_n": 0, "guid": "NA50NeKZl2B7Hl73NICYOTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, "source": "foo.png", "tags": [],
    "timestamp": 1369145184233.0 },
  { "comments_n": 0, "guid": "BA30Ne3Zl2B723E3NICYFTv7EnR4ghFE", "locked": false,
    "score": { "down": 0, "fav": 0, "total": 0, "up": 0 }, source: "bar.png", "tags": [],
    "timestamp": 1369145184213.0 } ]


---------------------------------------
- 2.6. Tag an object
---------------------------------------
URL         : /object/$oid/tag/$tag
METHOD      : PUT
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# example response body:
{ "tag": "misc" }


---------------------------------------
- 2.7. Rate an object
---------------------------------------
URL         : /object/$oid/rate
METHOD      : POST
PARAMETERS  : up
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

Use the "up" parameter to upvote/downvote an object (e.g. true to upvote
an object).

# Example response body:
{ "upvote": false }


---------------------------------------
- 2.8. Create/delete a comment
---------------------------------------
URL         : /object/$oid/comments
METHOD      : POST, DELETE
PARAMETERS  : text, parent-comment (optional)
HEADERS     : X-meat-a-username, X-meat-a-timestamp, X-meat-a-signature
RESPONSE    : application/json
STATUS CODES: 200

# Example response body:
[ { "text": "foo", "timestamp": 1369145893148,
    "user": { "blocked": false, "firstname": null, "gender": null,
              "lastname": null, "name": "john.doe" } } ]


---------------------------------------
- 2.9. Get comments
---------------------------------------
URL       : /object/$oid/comments/$page
METHOD    : GET
RESPONSE  : application/json
STATUS CODES: 200

Comments are sorted by "timestamp" in ascending order.

# Example response body:
[ { "text": "foo", "timestamp": 1369145893148.0,
    "user": { "blocked": false, "firstname": null, "gender": null,
              "lastname": null, "name": "user_b" } },
   { "text": "bar", "timestamp": 1369145893161.0,
     "user": { "blocked": false, "firstname": null, "gender": null, 
               "lastname": null, "name": "user_a" } } ]


---------------------------------------
- 2.10. Recommend an object
---------------------------------------
URL       : /object/$oid/recommend
METHOD    : POST
PARAMETERS: receivers
RESPONSE  : application/json
STATUS CODES: 200

The "receivers" parameter has to be a JSON array containing usernames
(e.g. [ "foo", "bar" ]).

# example response body:
{ "receivers": [ "john.doe", "sarah.connor" ] }


---------------------------------------
- 2.11. Report abuse
---------------------------------------
URL       : /object/$oid/abuse
METHOD    : PUT
RESPONSE  : application/json
STATUS CODES: 200

Reports abuse. Administrators will receive an mail.

# example response body:
Example response: { "reported": true }
