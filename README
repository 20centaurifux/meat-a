MEAT-A - README

meat-a is a WSGI based webservice for the organization of objects and
related meta data.

Each object is stored in a data store (database.ObjectDb). Objects are
referenced by their guid and have a source. You can e.g. store links to
images in the data store.

The web interface provides the functionality to let multiple users share
meta data. Objects can be tagged and rated. Users can also add objects to
their personal favorite list and recommend them to other users.

Users can follow each other. If user A follows user B and user B also
follows user A they are friends. Friends can recommend objects to each
other. If a user profile is not protected every user can recommend objects
to the user.

Users are organized in a separate user store (database.UserDb).

Several activities generate notifications. If a user adds an object to his/her
favorites friends will receive a notification. If the user profile is not
protected every user following the account will get a notification. Like other
objects notifications are stored in separate data store (database.StreamDb).

Sometimes a user will receive an email. If you're going to create a new user
profile a request code will be sent by email for example. Emails are stored
in the database.MailDb data store.

A service (mailer.Mailer) sends emails in a user-defined interval. This process
can also be triggered via a simple UDP request.

The different data stores can be accessed through the app.Application class. The
app.AuthenticatedApplication wraps the methods of the app.Application class and
tests additionally if a request is authenticated.

The authentication mechanism is quite simple. A request must contain at least
the username of a valid account and the current UNIX timestamp (UTC). All
parameters need to be sorted alphabetically. Then the HMAC-SHA1 checksum has to be
calculated. The required secret is the SHA-256 checksum of the user password. You
can find an example here: util.sign_message()

There's also an example client available: client.Client

The wsgi module tries to map a received path to a controller function. Each
controller returns a view.View object which will be used to generate the response.
The controller functions use an app.AuthenticatedApplication instance to access
the different data stores.

Data is stored with a MongoDB server but it's simple to use a different backend.

To test the available modules just execute the test.py file.

To configure the service please have a look at the config module.

Have fun!
